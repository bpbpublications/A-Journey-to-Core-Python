# -*- coding: utf-8 -*-
"""Untitled8.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1O8jpReM3tdejxCVbslmV8D_EcDoLM2SE
"""

# Defining a function

# 1.	def first(name):
# 2.	     """This is the first function"""
# 3.	     print(name)
# 4.	     return

# Function Calling

# 1.	first('hello world')
# 2.	hello world

# Docstring

# 1.	def sum(a, b):
# 2.	   ''' Adding two numbers '''
# 3.	   return a + b 
# 1.	print(first.__doc__)
# 2.	This is the first function

# Return statement 

# 1.	def first(name):
# 2.	     """This is the first function"""
# 3.	     return(name)
# 4.	 print(first('hello world'))
# 5.	hello world
# 6.	None

# def check(a):       
# 2.	    if a%2==0:
# 3.	ans="even"
# 4.	    else:
# 5.	ans="odd"
# 6.	    return ans
# 7.	m=int(input("enter a number: "))
# 8.	print(check(m))
# 9.	n=int(input("enter a number: "))
# 10.	print(check(n))

# Pass by Reference v/s Value

# 1.	def change(l1):
# 2.	     "changing the original list using function" 
# 3.	     print ("Values of list inside function before change: ", l1) 
# 4.	     l1[2]='banana' 
# 5.	     print ("Values of list inside function after change: ", l1)
# 6.	     return 
# 7.	
# 8.	l1 = ['apple','mango','litchi','orange'] 
# 9.	change(l1)
# 10.	print("\nValues of list are: ", l1) #values outside function

# Required Arguments

# 1.	defcal(a,b):
# 2.	    """program to calculate sum of 2 numbers"""
# 3.	    sum=a+b
# 4.	    return sum
# 5.	a=int(input("enter 1st number"))
# 6.	b=int(input("enter 2nd number"))
# 7.	print(cal(a,b))

#  print(cal(a))
# 2.	Traceback (most recent call last):
# 3.	  File "<pyshell#1>", line 1, in <module>
# 4.	    print(cal(a))
# 5.	TypeError: cal() missing 1 required positional argument: 'b'

# Default Arguments

# 1.	defcal(a,b=20):
# 2.	       """program to calculate sum of 2 numbers"""
# 3.	       sum=a+b
# 4.	       return sum
# 5.	 a=10
# 6.	b=12
# 7.	print(cal(a,b))
# 8.	22
# 9.	 print(cal(a))
# 10.	30

# a=10
# 2.	b=12
# 3.	print(cal(a,b=5))
# 4.	15
# 5.	print(cal(a=5,b))
# 6.	SyntaxError: positional argument follows keyword argument

# Keyword Arguments

# 1.	defcal(a,b):
# 2.	       """program to calculate sum of 2 numbers"""
# 3.	       sum=a+b
# 4.	       return sum
# 5.	print(cal(a=12,b=24))                                                      # 2 keyword argument
# 6.	36
# 7.	print(cal(b=24,a=12))                                                      # 2 keyword argument(out of order)
# 8.	36
# 9.	print(cal(24,b=4))                                                             # 1 positional, 1 keyword
# 10.	28
# 11.	print(cal(a=22,12))
# 12.	SyntaxError: positional argument follows keyword argument

# Arbitrary Arguments

# 1.	def display( arg1, *vartuple ): 
# 2.	   "Arbitrary arguments" 
# 3.	   print ("Output is: ") 
# 4.	   print (arg1) 
# 5.	   for var in vartuple: 
# 6.	      print (var) 
# 7.	   return
# 8.	display( 34) 
# 9.	display( 10,20,30,40 )

# The Anonymous Functions

# 1.	double = lambda x: x * 2                             # lambda function
# 2.	print(double(5))
# 3.	10

# se of Lambda Function

# 1.	list1 = [1, 5, 4, 6, 8, 11, 3, 12]  
# 2.	list2 = list(filter(lambda x: (x%2 == 0) , list1))
# 3.	print(list2)

# list1 = [1, 5, 4, 6, 8, 11, 3, 12]  
# 2.	list2 = list(map(lambda x: x * 2 , list1))
# 3.	print(list2)

# Scope of variable

# 1.	deffunc():
# 2.	    str = "hello"
# 3.	    print("Value of str inside function:",str)
# 4.	str = "world"
# 5.	func()
# 6.	print("Value of str outside function:",str)

# Recursion

# 1.	def fact(x):
# 2.	    """This is a recursive function
# 3.	to find the factorial of an integer"""
# 4.	    if x == 0 or x == 1:
# 5.	       return 1
# 6.	    else:
# 7.	        return (x * fact(x-1))   
# 8.	n = int(input("Enter a number: "))
# 9.	print("The factorial of", n, "is", fact(n))

# Program to find maximum of three numbers
# 2.	defmaxm(a,b,c):
# 3.	    if a>b and a>c:
# 4.	        max=a
# 5.	elif b>c and b>a:
# 6.	        max=b
# 7.	elif c>a and c>b:
# 8.	        max=c
# 9.	    return max
# 10.	a=int(input("enter a: "))
# 11.	b=int(input("enter b: "))
# 12.	c=int(input("enter c: "))
# 13.	print("largest number is ",maxm(a,b,c))

# Program to sum all the numbers in a list
# 3.	def sum(l1):
# 4.	    sum=0
# 5.	    for i in l1:
# 6.	        sum+=i
# 7.	    return sum
# 8.	l1=[20,15,8,22,10]
# 9.	print("sum of list is",sum(l1))

# Program to reverse a string
# 4.	def reverse(str):
# 5.	    l=len(str)
# 6.	    rev=""
# 7.	    for i in str:
# 8.	        rev=i+rev
# 9.	    return rev
# 10.	str=input("enter a string: ")
# 11.	print("the reverse of string is ",reverse(str))

# Python function to calculate the factorial of a number. The function accepts the number as an argument

# 1.	def facto(n):
# 2.	    fact=1
# 3.	    for i in range(1,n+1):
# 4.	        fact=fact*i
# 5.	    return fact
# 6.	n=int(input("enter a number: "))
# 7.	print("factorial of %d is"%(n),facto(n))

# # Program that accepts a list and return a new list with unique elements of the first list
# # 6.	def unique(l):
# # 7.	    x=[]Program to accept a string and calculate the number of uppercase and lowercase characters
# 7.	def count(str):
# 8.	uc=0
# 9.	lc=0
# 10.	    for i in str:
# 11.	        if ord(i)>=65 and ord(i)<=90:
# 12.	uc+=1
# 13.	eliford(i)>=97 and ord(i)<=122:
# 14.	lc+=1
# 15.	    return lc,uc
# 16.	str=input("enter a string")
# 17.	lc,uc=count(str)
# 18.	print("Uppercase characters= ",uc)
# 19.	print("lowercase characters= ",lc)
# # 8.	    for a in l:
# # 9.	        if a not in x:
# # 10.	x.append(a)
# # 11.	    return x
# # 12.	print(unique([1,2,4,6,7,6,5,3,5,6,6]))

# Program to calculate sum of series
#             1/2 – 3/4 + 5/6 ……….. n
# 1.	n=int(input("enter n: "))
# 2.	j=1
# 3.	s=0
# 4.	for i in range(1,n+1):
# 5.	    s=s+j/(j+1)*pow(-1,i+1)
# 6.	    j+=2
# 7.	print("sum of series is")
# 8.	print(s)

# Program to check whether a number is perfect number or not
# 9.	#perfect number
# 10.	def perfect(n,sum1):
# 11.	    for i in range(1, n):
# 12.	        if(n % i == 0):
# 13.	            sum1 = sum1 + i
# 14.	    return sum1
# 15.	n = int(input("Enter any number: "))
# 16.	sum1 = 0
# 17.	ans=perfect(n,sum1)
# 18.	if (ans == n):
# 19.	    print("The number is a Perfect number!")
# 20.	else:
# 21.	    print("The number is not a Perfect number!")

# Python program to evaluate a binomial expression
# 10.	def fact(n):
# 11.	    f=1
# 12.	    for i in range(1,n+1):
# 13.	        f=f*i
# 14.	    return f
# 15.	n=int(input("enter value of n: "))
# 16.	r=int(input("enter value of r: "))
# 17.	ans=fact(n)/fact(r)/fact(n-r)
# 18.	print("binomial coefficient is ",ans)

# Program to find H.C.F of two numbers
# 11.	defhcf(x, y):
# 12.	    if x > y:
# 13.	        small = y
# 14.	    else:
# 15.	        small = x  
# 16.	    for i in range(1,small + 1):
# 17.	       if((x % i == 0) and (y % i == 0)):
# 18.	hcf = i  
# 19.	    return  hcf
# 20.	a = int(input("Enter first number: "))
# 21.	b = int(input("Enter second number: "))  
# 22.	print("The H.C.F. of", a,"and", b,"is", hcf(a, b))

# Program to generate a Fibonacci series using recursion

# 1.	# fibonacci
# 2.	deffibo(n):
# 3.	    if n==0:
# 4.	        return 0
# 5.	    if n==1 or n==2:
# 6.	        return 1
# 7.	    else:
# 8.	        return(fibo(n-1)+fibo(n-2))
# 9.	n=int(input("enter number of terms: "))
# 10.	print("fibonaccies is ")
# 11.	for i in range(0,n):
# 12.	    print(fibo(i),end=" ")

# Program to  reverse a string using recursion
# 13.	def reverse(s1):
# 14.	    if(len(s1))==0:
# 15.	       return s1
# 16.	    else:
# 17.	       return reverse(s1[1:])+s1[0]
# 18.	s1=input("enter a string: ")
# 19.	print("reversed string is ")
# 20.	print(reverse(s1))





